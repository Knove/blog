一. 一个页面从输入url到页面加载显示完成，这个过程都发生了什么？
1.接收 URL，并拆分成协议，网络地址，资源路径
2.与缓存进行比对，如果请求的对象在缓存中，则直接进行第九步
3.如果网络地址不是一个 IP 地址，向操作系统询问，操作系统返回一个IP地址
4.浏览器向服务器发起一个 TCP 连接
5.浏览器通过 TCP 连接向服务器发起 HTTP 请求，HTTP 三次握手，HTTPS 握手过程则复杂得多
6.浏览器接受 HTTP 响应，这时候它能关闭 TCP 连接也能为另一个连接保留。
7.检查 HTTP header 里的状态码，并做出不同的处理方式。比如：错误（4XX、5XX），重定向（3XX），授权请求（2XX）
8.如果是可以缓存的，这个响应则会被存储起来
9.浏览器进行解码响应，并决定如何处理该响应（比如HTML页面，图像，声音等等）

二、说一下浏览器的缓存机制
https://juejin.im/post/5bfe879a51882531b81b0891
浏览器缓存机制有两种，一种为强缓存，一种为协商缓存。
对于强缓存，浏览器在第一次请求的时候，会直接下载资源，然后缓存在本地，第二次请求的时候，直接使用缓存。
对于协商缓存，第一次请求缓存且保存缓存标识与时间，重复请求向服务器发送缓存标识和最后缓存时间，服务端进行校验，如果失效则使用缓存。

强缓存
Exprires：服务端的响应头，第一次请求的时候，告诉客户端，该资源什么时候会过期。Exprires的缺陷是必须保证服务端时间和客户端时间严格同步。
Cache-control：max-age，表示该资源多少时间后过期，解决了客户端和服务端时间必须同步的问题，

协商缓存方案
If-None-Match/ETag：缓存标识，对比缓存时使用它来标识一个缓存，第一次请求的时候，服务端会返回该标识给客户端，客户端在第二次请求的时候会带上该标识与服务端进行对比并返回If-None-Match标识是否表示匹配。
Last-modified/If-Modified-Since：第一次请求的时候服务端返回Last-modified表明请求的资源上次的修改时间，第二次请求的时候客户端带上请求头If-Modified-Since，表示资源上次的修改时间，服务端拿到这两个字段进行对比。

三、React
1.react组件生命周期详解 16.x
https://www.jianshu.com/p/514fe21b9914

2.



四、
webpack 原理
https://www.jianshu.com/p/e24ed38d89fd
webpack做的就是分析代码。转换代码，编译代码，输出代码

webpack构建流程
从启动webpack构建到输出结果经历了一系列过程，它们是：

·解析webpack配置参数，合并从shell传入和webpack.config.js文件里配置的参数，生产最后的配置结果。
·注册所有配置的插件，让插件监听webpack构建生命周期的事件节点，以做出对应的反应。
·从配置的entry入口文件开始解析文件构建依赖图谱，找出每个文件所依赖的文件，递归下去。
·在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。
·递归完后得到每个文件的最终结果，根据entry配置生成代码块chunk。
·输出所有chunk到文件系统。

webpack 同步依赖 实现 
将模块（未执行的）暂存在modules 中。引用模块时，发现缓存中没有，则从modules对象中取出暂存的模块并执行
需要引入模块时，同步地将模块从暂存区取出来执行，避免使用网络请求导致过长的同步等待时间

webpack 异步依赖 实现 
判断要异步依赖的是否已经加载，如果没有，则创建Promise 获取文件路径，并以Script标签的形式加载，最后返回Promise

Tapable接收webpack运行中的广播监听
Compiler 包含了 Webpack 环境所有的的配置信息，包含 options，loaders，plugins 这些信息，这个对象在 Webpack 启动时候被实例化，它是全局唯一的，可以简单地把它理解为 Webpack 实例
emit done
Compilation 象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 Compilation 将被创建。
Compilation 对象也提供了很多事件回调供插件做扩展。通过 Compilation 也能读取到 Compiler 对象

webpack 实现一个webpack插件
writing-a-plugin
https://webpack.js.org/contribute/writing-a-plugin/ 
从UglifyJSPlugin强制开启css压缩探究webpack插件运行机制 
https://juejin.im/post/5951c37df265da6c3901e8e2
Webpack原理-编写Plugin
https://segmentfault.com/a/1190000012840742 【重要】

十、AMD 、CMD、ES6 Module、CommonJS
AMD 异步方式加载模块 依赖前置、提前执行
CMD  依赖就近、延迟执行
ES6 Module   
异步导入
CommonJS:
CommonJS 用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。

CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。
CommonJS 模块是运行时加载，ES6 模块是编译时加载。
CommonJS 模块就是一个对象，在导入时先加载整个模块，生成一个对象( 这个对象只有在脚本运行完才会生成 )，然后再从这个对象上读取方法，这种加载称为“运行时加载”。
ES6 模块不是对象，它的对外接口只是一种静态定义，在代码运行之前( 即编译时 )的静态解析阶段就完成了模块加载，比 CommonJS 模块的加载方式更高效。

十二、AST 抽象语法树
源代码的抽象语法结构的树状表现形式，更利于程序的分析

十三、CSS3新特性
border-radius、background-size、text-shadow、@font-face、translate(位移)、transform(旋转)、transition(过渡)
@keyframes 动画

十四、前端工程化
前端工程化 包括前端的模块化、组件化、自动化，还包括前端性能优化，前端目录规划，前端规范化，自动化测试，发布等等一系列


# CSS

1. 垂直水平居中的4种方式：
① 行内元素 vertical-align: middle;/*垂直居中*/
② position: absolute 然后translate移动位置
③ Table
④ js获取计算宽高
⑤ flex 布局 

# 杂项
1.
this: 
学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域
this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用

1.1. 
函数的四种调用模式
·函数调用 · 方法调用 · 构造器调用 · call、apply上下文调用模式

1.2
异步编程的4种方式：
·.回调 ·事件监听 ·发布/订阅  ·Promises对象
 
1.5.
函数节流/函数去抖
根据时间戳来判断执行的频率 -> 节流
通过定时器来进行函数的执行次数频率限制 -> 去抖

1.6
提升scroll事件的性能
`使用web worker分离无页面渲染无关的逻辑计算
`触发监听事件时使用函数节流与函数去抖
`使用requestAnimationFrame与requestIdleCallback代替定时器
`避免强制重排
`提升合成层

2. 跨域 https://www.jianshu.com/p/438183ddcea8
① iframe 
② jsonp 
       原理：通过<script>标签没有跨域限制来进行数据交互.就是提供一个回调函数接受json数据，在浏览器中执行并处理穿过来的数据。
③CORS header ：Access-Control-Allow-Origin。
④ nginx 反向代理 解决跨域
⑤ postMessage
原理： H5新API

3. CSS 选择器权重
` 行内样式，指的是html文档中定义的style     +1000
` ID选择器                                  +100
` 类，属性选择器和伪类选择器                +10
` 元素和伪元素                              +1

4. HTTP/2 与其上一个版本的基本区别
`. 二进制协议
`. 多路复用
`. 数据流
`. 头信息压缩
`. 服务器推送

5. new绑定
·创建(或者说构造)一个全新的对象。
·这个新对象会被执行[[原型]]连接。
·这个新对象会绑定到函数调用的this。
·如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。

6.Fetch API 相对于传统的 Ajax 有哪些改进？
·语法简洁，更加语义化
·基于标准 Promise 实现，支持 async/await

7. 
回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，
浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），
然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。

重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，
浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。

8. promise 原理：
一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果
特点：
·对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。
只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态
· 一旦状态改变，就不会再变，任何时候都可以得到这个结果
最简化：                            
const PENDING = 0;
const FULFILLED = 1;
const REJECTED = 2;
function P(fn) {
       const events = [];
       let state = PENDING;

       // THEN
       this.then = f => {
              var self = this;
              return new P( resolve => {
                     self.done( () => {
                            f(resolve);
                     });
              });
       };
      
       function handle (f) {
              if (state === PENDING) {
                     events.push(f);
              } else if (state === FULFILLED && typeof f === 'function') {
                     f();
              }
       }  

       this.done = f => {
              // 保证异步
              setTimeout(() => {
                     handle(f);
              }, 0);
       }

       function resolve() {
              try{
                     const f = events.shift();
                     console.warn(f);
                     f(resolve);
                     state = FULFILLED;
              } catch(e) {
                     state = REJECTED;
              }
       }
       fn(resolve);
}
没有状态机：
function P(fn){
       const events = [];
       this.then = (f) => {
              events.push(f);
              return this;
       }
       function resolve() {
              const f = events.shift();
              f(resolve);
       }
       fn(resolve);
}

9.深克隆函数
deepClone(obj)
if obj!= object && != Array 
return 
object = array ? o = [] : o = {}
for (i in obj)
o[i]  = typeOf obj[i] === "object" ? deepClone(obj[i]) : obj[i]
return o 

9. react-router的基本原理
实现URL与UI界面的同步。其中在react-router中，URL对应Location对象，而UI是由react components来决定的，这样就转变成location与components之间的同步问题。
依赖于history.js库，来适应不同浏览器或者运行环境的差异

10.generator 简介
generator:您可以将生成器视为可以暂停和恢复的进程（代码段),代码在执行的过程中可以主要交出控制权
genearator 语法:function *是一个新的关键字用于生成器函数（也有生成器方法）。
yield是generator可以自行暂停的运算符。此外，generator还可以通过yield接收输入和发送输出。

10. event loop
一个event loop只要存在，就会不断执行下边的步骤：
       1.在tasks队列中选择最老的一个task,用户代理可以选择任何task队列，如果没有可选的任务，则跳到下边的microtasks步骤。
       2.将上边选择的task设置为正在运行的task。
       3.Run: 运行被选择的task。
       4.将event loop的currently running task变为null。
       5.从task队列里移除前边运行的task。
       6.Microtasks: 执行microtasks任务检查点。（也就是执行microtasks队列里的任务）
       7.更新渲染（Update the rendering）...
       8.如果这是一个worker event loop，但是没有任务在task队列中，并且WorkerGlobalScope对象的closing标识为true，则销毁event loop，中止这些步骤，然后进行定义在Web workers章节的run a worker。
       9.返回到第一步。
`在一轮event loop中多次修改同一dom，只有最后一次会进行绘制
`渲染更新（Update the rendering）会在event loop中的tasks和microtasks完成后进行，但并不是每轮event loop都会更新渲染，这取决于是否修改了dom和浏览器觉得是否有必要在此时立即将新状态呈现给用户。
如果在一帧的时间内（时间并不确定，因为浏览器每秒的帧数总在波动，16.7ms只是估算并不准确）修改了多处dom，浏览器可能将变动积攒起来，只进行一次绘制，这是合理的。
`如果希望在每轮event loop都即时呈现变动，可以使用requestAnimationFrame。
· microtask 执行的时机是：
       1. 当上下文执行栈为空时，执行一个microtask checkpoint。
       2. 在event loop 运行task之后，更新渲染之前。

11. Update the rendering

Microtasks 结束后执行：

`处理 HTML 标记并构建 DOM 树。
`处理 CSS 标记并构建 CSSOM 树， 将 DOM 与 CSSOM 合并成一个渲染树。
`根据渲染树来布局，以计算每个节点的几何信息。
`将各个节点绘制到屏幕上。
·
渲染计算是浏览器GUI渲染线程负责，是由浏览器用c++编写的模块负责的。
GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。
·

12. JS V8性能优化点：
① V8将JavaScript代码转换为更高效的机器代码，而不是使用解释器。它通过实现JIT（即时）编译器将JavaScript代码编译成机器代码
② Hidden Class 重用优化
③ Inline caching (内联缓存) 内联缓存依赖于观察到对相同方法的重复调用往往发生在同一类型的对象上
④ GC： 标记和扫描， 采用增量标记，连续的GC只是一部分，互相会接连

13. PWA
Service Worker （可以理解为服务工厂）SW 是浏览器在后台独立于网页运行的脚本
Manifest （应用清单）模拟网页为应用
Push Notification（推送通知） 浏览器发出的通知消息  ：服务器端将更新的信息

14.
同步：执行一个操作之后，等待结果，然后才继续执行后续的操作。异步：执行一个操作后，可以去执行其他的操作，然后等待通知再回来执行刚才没执行完的操作。

同步和异步关注的是消息通信机制，所谓同步，就是在发出一个调用时，在没有得到结果之前，该调用就不返回，但是一旦调用返回，就得到返回值了；换句话说，就是由调用者主动等待这个调用的结果。

异步则相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果，而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。

二、阻塞：进程给CPU传达一个任务之后，一直等待CPU处理完成，然后才执行后面的操作。非阻塞：进程给CPU传达任务后，继续处理后续的操作，隔断时间再来询问之前的操作是否完成。这样的过程其实也叫轮询。

阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。

阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。

非阻塞调用指的在不能立刻得到结果之前，该调用不会阻塞当前线程。

并发：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。

并行：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)

15. 进程 线程
进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元
线程：单个进程中执行中每个任务就是一个线程。线程是进程中执行运算的最小单位。独立运行和独立调度的基本单位

要解决的记录：
1.轮播图 实现
2.算法 https://juejin.im/post/5bfa4ae76fb9a049df23bbb4 
求x的y次方  js实现数值千分位 
3.数据结构 双链表 https://segmentfault.com/a/1190000011101297 /  js实现对树深度优先遍历与广度优先遍历 


资料：
!. 高级前端面试题汇总https://juejin.im/post/5bc92e9ce51d450e8e777136
0. https://juejin.im/post/5befeb5051882511a8527dbe https://juejin.im/post/5bf8fe2ee51d452d705fee3d
1. webpack的一些plugin ： https://segmentfault.com/a/1190000016816813
4. webpack优化： https://segmentfault.com/a/1190000007891318?utm_source=tag-newest
2. Promise实现原理： https://segmentfault.com/a/1190000013396601
3.  一个动效CSS3 ： https://codepen.io/Chokcoco/pen/RVxbWW 
4. 动态规划 !!
5. 2019年前端面试都在聊啥？ https://juejin.im/post/5bf5610be51d452a1353b08d 【重要】
6.https://github.com/alienzhou/frontend-tech-list#11-javascript  前端技术清单  【重要】
7.http://es6.ruanyifeng.com/  ECMAScript 6
8. 偏门前端面试题：https://www.bougieblog.cn/article/Qk9VMTlHSUU.html 