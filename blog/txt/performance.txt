说说之前怎么处理的吧，而且之后肯定会比之前做的好

【场景】 首屏加载速度过慢，用户体验差，流量消耗大，也导致手机发热严重

处理方案：
原本项目首屏加载 2MB
webpack 层面全面优化：

    升级版本。针对性的增加配置，例如开启缓存，开启 magic 注释。（提升打包速度，改变浏览器加载机制）
    公共代码切片，这里提出多项目的公用 js，实现了内部项目首屏大幅度减少 （-50%，gzip前 大约400kb）
    组件/路由 切片 实现组件懒加载 （-10%，gzip前 大约100kb）
    Tree Shaking，实现冗余代码自动删除 (-5%, gzip前 大约50kb)

使首屏加载 js/css 减少 60 - 70 %，200kb即可加载出首屏框架（不包含图片）

图片压缩处理，并采用webp，图片实现可见视口的懒加载  -  减少大量首屏流量 （-80% ）
现在首页 控制在了 1MB 包含图片

数据分析 性能数据上报



【场景】发现每次测试、打包会影响效率

之前构建环境都是手动，例如手动提交到环境内，或者有些项目指令比较繁多

开发流程效率优化：
webpack 插件开发，实现统一所有项目加入插件后，一行指令，构建测试环境，多渠道构建

开发Node工具，实现多项目一键启动

从而使项目构建，启动都会很方便，统一规范流程后，降低出错概率



【场景】 发现代码开发可以流程优化：
之前用的 react + dva，新建项目会有很多繁琐流程，例如新建moulde，新建路由，项目结构初始化（有些组件需要再引入）

写出Node工具，实现 代码 cli，新的模块一行指令即可搭建出模板，去掉无用的项目文件新建过程，提升开发效率和体验感。
而且还起到了规范统一代码格式的作用，易于维护




打点方案

react 项目

采用 hooks + 装饰器 配合打点

hooks本身内部可以实现组件加载完毕后的 view 或者 PV 点，这里可以只需要引入hooks配置即可

通过hooks引出很多函数，配合装饰器来进行 click 打点
在一些 react 项目尤其是 antd 的项目，可以实现比较自由的打点方案，只需要在调用的函数上的装饰器加入一些参数即可

较复杂的特殊类型打点，也可以直接引出来在项目中处理




vue 项目

directive 实现 普通的 click，view， pv  的处理

复杂的是像检测是否在可视窗口内，或者有滑动list的
是维护了一个队列，

所有元素会被添加一个标记，如果在可视窗口内 则被放入队列，最后一并打出

list会单独处理，如果有滑动，则会在滑动结束后，在list的可视区域内元素会依次打点

打完点后将标记清除，防止重复打点






双向选择 不用太过在乎 如果不合适 去了也不合适